import java.util.function.BiConsumer

plugins {
    id 'java-library'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
    }
}

group = "com.github.filipmalczak"
version = '0.0.1-SNAPSHOT'

repositories {
  mavenCentral()
}

def recordDefinition(String name, int arity) {
    int x = arity-1
    String genericsDeclaration = "<${(0..x).collect { "T$it" }.join(", ")}>"
    String fields = "${(0..x).collect { "T$it v$it" }.join(", ")}"
    String names = "${(0..x).collect { "v$it" }.join(", ")}"
    """
public record ${name}${genericsDeclaration}(
    ${fields.replaceAll(", ", ",\n    ")}
){
    public static ${genericsDeclaration} ${name}${genericsDeclaration} of($fields){
        return new ${name}<>($names);
    }
    
    public $name<${(x..0).collect { "T$it" }.join(", ")}> reverse(){ return of(${(x..0).collect { "v$it" }.join(", ")}); }

${(0..x).collect {
    "    public T$it get$it() { return v$it; }"
}.join("\n")}

${(0..x).collect {
        "    public <T> ${name}${genericsDeclaration.replace("T$it", "T")} with$it(T v) { return of(${names.replace("v$it", "v")}); }"
    }.join("\n")}

${(0..x).collect {
        "    public <T> ${name}${genericsDeclaration.replace("T$it", "T")} map$it(Function<T$it, T> mapper) { return with$it(mapper.apply(v$it)); }"
    }.join("\n")}
}
"""
}

String recordJavaSource(String name, int arity){
    """package ${BASE_PKG};

import java.util.function.Function;

${recordDefinition(name, arity)}
"""
}


task prepareSourceSet(group: "generation", description: "Make the directory to store the sources") {
    doLast {
        file("src${File.separator}main${File.separator}generatedJava${File.separator}${BASE_PKG.replaceAll("[.]", File.separator)}"). mkdirs()
    }
}

task generateTupleSources(group: "generation", description: "Generate the actual sources", dependsOn: prepareSourceSet) {
    doLast {
        BiConsumer generate = (name, arity) -> {
            file(
                "src${File.separator}main${File.separator}generatedJava${File.separator}${BASE_PKG.replaceAll("[.]", File.separator)}${File.separator}${name}.java"
            )
            .withWriter { it.print(recordJavaSource(name, arity)) }
        }
        generate.accept("Unit", 1)
        generate.accept("Pair", 2)
        generate.accept("Triplet", 3)
        generate.accept("Quartet", 4)
        generate.accept("Quintet", 5)
        generate.accept("Sextet", 6)
        generate.accept("Septet", 7)
        generate.accept("Octet", 8)
    }
}

clean {
    delete "src${File.separator}main${File.separator}generatedJava"
}

compileJava.dependsOn generateTupleSources

sourceSets {
    main {
        java {
            srcDir "src${File.separator}main${File.separator}generatedJava"
        }
    }
}


tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

wrapper {
    gradleVersion = "7.1.1"
    distributionType = Wrapper.DistributionType.ALL
}
